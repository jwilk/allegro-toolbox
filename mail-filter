#!/usr/bin/env python3

# Copyright Â© 2019-2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import sys

if sys.version_info < (3, 4):
    raise RuntimeError('Python >= 3.4 is required')

import email.generator
import email.policy
import urllib.parse

import lxml.html

def filter_query(query, *keys):
    return [
        (k, v) for (k, v) in query
        if not k.startswith(keys)
    ]

def fix_url(url):
    tup = urllib.parse.urlsplit(url)
    netloc = tup.netloc
    if netloc == 'a.allegroimg.com':
        return ''
    if netloc.endswith('.allegrostatic.com') and '/icons/' in tup.path:
        return ''
    query = urllib.parse.parse_qsl(tup.query)
    fragment = tup.fragment
    if netloc == 't.allegro.pl':
        if tup.path.startswith('/tr/'):
            return ''
        qdict = dict(query)
        if tup.path.startswith('/rd/'):
            return fix_url(qdict['url'])
        query = filter_query(query, 'utm_', 'tr_')
        query = [
            (k, urllib.parse.unquote_plus(v))
            for (k, v) in query
        ]
        netloc = qdict['tr_d']
        fragment = qdict.get('tr_f')
    else:
        query = filter_query(query, 'utm_')
    query = urllib.parse.urlencode(query)
    tup = tup._replace(netloc=netloc, query=query, fragment=fragment)
    return urllib.parse.urlunsplit(tup)

def main():
    whole_msg = email.message_from_binary_file(sys.stdin.buffer, policy=email.policy.default)
    msg = whole_msg.get_body('html')
    if msg is not None:
        charset = msg.get_content_charset()
        html = msg.get_payload(decode=True)
        html = html.decode(charset)
        html = lxml.html.fromstring(html)
        html.rewrite_links(fix_url)
        html = lxml.html.tostring(html, encoding='unicode')
        msg.clear_content()
        msg.set_content(html, cte='8bit')
        msg.set_type('text/html')
        content_length = len(msg.get_payload(decode=True)) - 1
        msg['Content-Length'] = str(content_length)
    generator = email.generator.BytesGenerator(sys.stdout.buffer, mangle_from_=False)
    generator.flatten(whole_msg, unixfrom=True)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
